package com.olymtech.nebula.service.action;import com.olymtech.nebula.core.action.AbstractAction;import com.olymtech.nebula.dao.*;import com.olymtech.nebula.entity.*;import com.olymtech.nebula.entity.enums.HostPublishStatus;import com.olymtech.nebula.entity.enums.PublishAction;import com.olymtech.nebula.service.IFileAnalyzeService;import com.olymtech.nebula.service.IAnalyzeArsenalApiService;import com.olymtech.nebula.service.IPublishScheduleService;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.util.*;import static com.olymtech.nebula.common.utils.DateUtils.getKeyDate;import static com.olymtech.nebula.common.utils.DateUtils.simple;/** * Created by liwenji on 2015/11/4. */@Servicepublic class PublishRelationAction extends AbstractAction {    private Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    IAnalyzeArsenalApiService analyzeArsenalApiService;    @Resource    IFileAnalyzeService fileAnalyzeService;    @Resource    INebulaPublishModuleDao nebulaPublishModuleDao;    @Resource    INebulaPublishHostDao nebulaPublishHostDao;    @Resource    INebulaPublishAppDao nebulaPublishAppDaoImpl;    @Autowired    private IPublishScheduleService publishScheduleService;    @Resource    private INebulaPublishSlbDao nebulaPublishSlbDao;    @Resource    private INebulaPublishEventDao publishEventDao;    @Value("${master_deploy_dir}")    private String MasterDeployDir;    public PublishRelationAction() {    }    @Override    public boolean doAction(NebulaPublishEvent event) throws Exception {        publishScheduleService.logScheduleByAction(event.getId(), PublishAction.ANALYZE_PROJECT, event.getPublishActionGroup(), null, "");        String publicWarDirPath = MasterDeployDir + "/" + event.getPublishProductKey() + "/publish_war/";        List<String> appNameList = fileAnalyzeService.getFileListByDirPath(publicWarDirPath);        String appNames = "";        String regex = ".*\\.war$";        List<String> appNameListWithoutWar = new ArrayList<>();        List<String> errorNameList = new ArrayList<>();        for (int i = 0; i < appNameList.size(); i++) {            if (appNameList.get(i).matches(regex)) {                String appname = appNameList.get(i).replace(".war", "");                appNameListWithoutWar.add(appname);            } else {                errorNameList.add(appNameList.get(i));            }        }        if (errorNameList.size() > 0) {            String errorNames = StringUtils.join(appNameListWithoutWar.toArray(), ",");            publishScheduleService.logScheduleByAction(event.getId(), PublishAction.ANALYZE_PROJECT, event.getPublishActionGroup(), false, "非war包文件名,无法进行发布,是否删除?文件名为:" + errorNames);            return false;        }        appNames = StringUtils.join(appNameListWithoutWar.toArray(), ",");        try {            List<NebulaPublishModule> modules = new ArrayList<>();            Map<String, Object> resultMap = analyzeArsenalApiService.getSimpleHostListByProductAndModule(event.getPublishProductName(), appNames, event.getPublishEnv());            if (resultMap == null) {                publishScheduleService.logScheduleByAction(event.getId(), PublishAction.ANALYZE_PROJECT, event.getPublishActionGroup(), false, "请求基础数据库异常:" + appNames);                return false;            }            String msg = resultMap.get("msg").toString();            List<ProductTree> moduleTrees = (List) resultMap.get("result");            if (StringUtils.isNotEmpty(msg)) {                publishScheduleService.logScheduleByAction(event.getId(), PublishAction.ANALYZE_PROJECT, event.getPublishActionGroup(), false, msg);                return false;            }            if (moduleTrees == null || moduleTrees.size() == 0) {                publishScheduleService.logScheduleByAction(event.getId(), PublishAction.ANALYZE_PROJECT, event.getPublishActionGroup(), false, "您提交的SVN地址无法正确解析主机及应用的信息(匹配工程名称出错)");                return false;            }            for (ProductTree moduleTree : moduleTrees) {                NebulaPublishModule nebulaPublishModule = new NebulaPublishModule();                nebulaPublishModule.setPublishEventId(event.getId());                nebulaPublishModule.setModuleSrcSvn(moduleTree.getSrcSvn());                nebulaPublishModule.setPublishModuleName(moduleTree.getNodeName());                nebulaPublishModule.setPublishProductName(event.getPublishProductName());                Date now = event.getSubmitDatetime();                String date = getKeyDate(now);                String key = event.getPublishEnv() + "." + event.getPublishProductName() + "." + nebulaPublishModule.getPublishModuleName() + "." + date;                nebulaPublishModule.setPublishModuleKey(key);                Integer moduleId = nebulaPublishModuleDao.insert(nebulaPublishModule);                List<NebulaPublishHost> hosts = new ArrayList<>();                for (SimpleHost simpleHost : moduleTree.getHosts()) {                    NebulaPublishHost publishHost = new NebulaPublishHost();                    publishHost.setPublishEventId(event.getId());                    publishHost.setPublishModuleId(moduleId);                    publishHost.setPassPublishHostName(simpleHost.getHostName());                    publishHost.setPassPublishHostIp(simpleHost.getHostIp());                    publishHost.setHostInstanceId(simpleHost.getHostInstanceId());                    publishHost.setBatchTag(simpleHost.getBatchTag());                    publishHost.setHostPublishStatus(HostPublishStatus.PENDING_PUBLISH);                    nebulaPublishHostDao.insert(publishHost);                    hosts.add(publishHost);                }                List<NebulaPublishApp> apps = new ArrayList<>();                int n = moduleTree.getApps().size();                for (int i = 0; i < n; i++) {                    NebulaPublishApp nebulaPublishApp = new NebulaPublishApp();                    nebulaPublishApp.setPublishAppName(moduleTree.getApps().get(i));                    nebulaPublishApp.setPublishEventId(event.getId());                    nebulaPublishApp.setPublishModuleId(nebulaPublishModule.getId());                    nebulaPublishAppDaoImpl.insert(nebulaPublishApp);                    apps.add(nebulaPublishApp);                }                List<NebulaPublishSlb> slbs = new ArrayList<>();                for (SimpleSlb slb : moduleTree.getSlbs()) {                    NebulaPublishSlb nebulaPublishSlb = new NebulaPublishSlb();                    nebulaPublishSlb.setPublishEventId(event.getId());                    nebulaPublishSlb.setPublishModuleId(nebulaPublishModule.getId());                    nebulaPublishSlb.setLoadBalancerId(slb.getLoadBalancerId());                    nebulaPublishSlb.setLoadBalancerName(slb.getLoadBalancerName());                    nebulaPublishSlb.setLoadBalancerAddress(slb.getLoadBalancerAddress());                    nebulaPublishSlb.setLoadBalancerStatus(slb.getLoadBalancerStatus());                    nebulaPublishSlb.setRegionId(slb.getRegionId());                    nebulaPublishSlb.setAliyunAccount(slb.getAliyunAccount());                    nebulaPublishSlbDao.insert(nebulaPublishSlb);                    slbs.add(nebulaPublishSlb);                }                nebulaPublishModule.setPublishHosts(hosts);                nebulaPublishModule.setPublishApps(apps);                nebulaPublishModule.setPublishSlbs(slbs);                modules.add(nebulaPublishModule);            }            event.setPublishModules(modules);            /** 发布批次打标 */            createPublishBatchTag(modules, event);            publishScheduleService.logScheduleByAction(event.getId(), PublishAction.ANALYZE_PROJECT, event.getPublishActionGroup(), true, "");            return true;        } catch (Exception e) {//            publishScheduleService.logScheduleByAction(event.getId(), PublishAction.ANALYZE_PROJECT, event.getPublishActionGroup(), false, "error message");            logger.error("PublishRelationAction error:", e);        }        publishScheduleService.logScheduleByAction(event.getId(), PublishAction.ANALYZE_PROJECT, event.getPublishActionGroup(), false, "分析发布工程时发生错误，可点击“重试”，尝试重新分析。");        return false;    }    /**     * 给机器打标，安排发布先后循序     * 一个模块所有机器batchTag符合以下条件：     * 1.如果 batchTag 都未打标 1/2，则默认标记成 1 2 3 ...（逐台发布）     * 2.如果 batchTag 有打标 1/2，则按照打标（如出现一个模块下多台机器，有打标，又有未打标，未达标的默认标记1）     *     * @param modules     */    private void createPublishBatchTag(List<NebulaPublishModule> modules,NebulaPublishEvent event) {        /** event记录所有module，最大批次数 */        Integer batchTotalEvent = 0;        for(NebulaPublishModule module:modules){            List<NebulaPublishHost> hosts = module.getPublishHosts();            if(hosts.size() == 0){                updateBatchTotal(module,event,0);                continue;            }            Integer unTagCount = 0;            Integer tagCount = 0;            Set<Integer> tagType = new HashSet<>();            for(NebulaPublishHost host:hosts){                if(host.getBatchTag() == null){                    unTagCount++;                }else{                    tagCount++;                    tagType.add(host.getBatchTag());                }            }            /** tag种类 目前基础信息库控制2种 1/2  2016.6.22 */            Integer tagTypeCount = tagType.size();            Integer hostCount = hosts.size();            /** 都已打标 */            if(hostCount.equals(tagCount)){                updateBatchTotal(module, event, tagTypeCount);                if(tagTypeCount > batchTotalEvent){                    batchTotalEvent = tagTypeCount;                }                continue;            }            /** 都未打标 */            if(hostCount.equals(unTagCount)){                for(int i = 0;i<hostCount;i++){                    NebulaPublishHost host = hosts.get(i);                    Integer batchTag = i+1;                    host.setBatchTag(batchTag);                    nebulaPublishHostDao.updateByIdSelective(host);                }                Integer batchTotal = hostCount+1;                updateBatchTotal(module, event, batchTotal);                if(batchTotal > batchTotalEvent){                    batchTotalEvent = batchTotal;                }            /** 部分打标，部分未打标 */            }else{                for(NebulaPublishHost host:hosts){                    if(host.getBatchTag() == null){                        host.setBatchTag(1);                        nebulaPublishHostDao.updateByIdSelective(host);                    }                }                updateBatchTotal(module, event, tagTypeCount);                if(tagTypeCount > batchTotalEvent){                    batchTotalEvent = tagTypeCount;                }            }        }        event.setBatchTotal(batchTotalEvent);        publishEventDao.updateByIdSelective(event);    }    private void updateBatchTotal(NebulaPublishModule module,NebulaPublishEvent event, Integer batchTotal){        module.setBatchTotal(batchTotal);        nebulaPublishModuleDao.updateByIdSelective(module);    }    @Override    public void doFailure(NebulaPublishEvent event) {    }    @Override    public boolean doCheck(NebulaPublishEvent event) throws Exception {        return true;    }}